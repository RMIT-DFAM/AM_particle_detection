This codebase, as found here (https://github.com/RMIT-DFAM/AM_particle_detection),
was developed for use for the following publication:

"Algorithmic Detection And Categorization Of Partially Attached Particles In AM Structures: A Non-Destructive Method For The Certification Of Lattice Implants". The publication can be located with the following Digital Object Identifier (DOI) = DOI: 10.1108/RPJ-07-2022-0225(DOI: 10.1108/RPJ-07-2022-0225).

Please cite both the publication and GitHub repository if using or modifying this work.

This codebase is used to analyze and categorise particle and particle cluster material from thresholded slice Micro CT datasets of AM implant structures.

There are three options at startup when running the code.

OPTION 1: Use the reconstructed slice data as the data that is input.
OPTION 2: Use a matrix file (this is generated and saved by running the first startup option) with saved variable information
OPTION 3: Use a generated test data set (currently generated by Digital_Origin_Test_Case_Generation_For_Algorithm_v3.m)

If you just wish to generate the results as found in the afore mentioned publication, there are two options available to you. 
Please note that your "Current Folder" for MATLAB, should be the folder that contains the reconstructed slice files & the reconstruction log, and/or the matrix file(s) respectively.

-> Option One is to run the codebase under Startup Option One, and inputting the "useDefault" variable as "true"
---> If you wish to try this codebase with your own dataset, best to run through Startup Option One, with useDefault = false. After the intial run through of this option, you can then use Startup Option Two, which will help speed up the process.
---> useDefault was a flag implemented for iteration and debugging purposes.
-----> Selecting "true" will run through with pre-selected variables and file locations.
-----> Selecting 'false' will allow the user to manually select key variables and options.
-> Option Two is to run the codebase under Startup Option Two, and use the three different provided "ZZ_PreAnalysisData_ZZ.mat" matrix files as inputs.

Please note that the density-based spatial clustering used for the Particle Detection Algorithm has two independant variables (epsilon,minpts). These have currently not been implemented in a way to allow for user selection in the MATLAB command window and are currently set to 3 and 5 respectively. 
These will either need to be updated manually in the codebase each time, or a slight adjustment to the code will be needed to implement them based on user input. These can be found in the "%% Part 2 - externalMinorBounds (EMB) Preparation" section.

In Section "%% Part 1.5.1 - Get "bounds"", the following lines of code are used to generate a isosurface volume rendering of the input dataset:

iptsetpref('VolumeViewerUseHardware',false); 
V = squeeze(imgStack_Adjusted_saveOut);
ax = axes(figure);
fv = volshow(V,'Renderer','VolumeRendering');
ax.View = [90,15];

Please note that for the first line, the flag of 'false' or 'true' is dependant on the computer hardware setup.
-> If using a computer with Integrated Graphics, 'false' must be used.
-> If using a computer with a dedicated graphics card, 'true' should be used.
